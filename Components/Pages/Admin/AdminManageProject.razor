@page "/admin/projects/{projectId:int}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using PunchList.Services
@using PunchList.Models
@using System.ComponentModel.DataAnnotations
@attribute [Authorize(Roles = "Admin")]
@inject IProjectService ProjectService
@inject ITaskItemService TaskItemService
@inject ISubTaskItemService SubTaskService
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager

@if (isLoading)
{
    <p>Loading...</p>
}
else if (project is null)
{
    <div class="alert alert-warning">Project not found.</div>
}
else
{
    <div class="d-flex justify-content-between align-items-center mt-4">
        <div>
            <h4 class="mb-0">@project.Name</h4>
            @if (!string.IsNullOrWhiteSpace(project.Description))
            {
                <div class="text-muted">@project.Description</div>
            }
        </div>
        <button class="btn btn-outline-danger" @onclick="DeleteProject" disabled="@busy">Delete Project</button>
    </div>
    <hr />

    @if (!string.IsNullOrWhiteSpace(message))
    {
        <div class="alert alert-success">@message</div>
    }
    @if (!string.IsNullOrWhiteSpace(error))
    {
        <div class="alert alert-danger">@error</div>
    }

    <div class="card mb-4">
        <div class="card-header d-flex justify-content-between align-items-center" @onclick="ToggleAddTaskBox" style="cursor:pointer;">
            <span class="fw-semibold">Add Task</span>
            <button class="btn btn-sm btn-outline-secondary" @onclick:stopPropagation="true" @onclick="ToggleAddTaskBox" disabled="@busy">
                @(showAddTask ? "Close ▾" : "Open ▸")
            </button>
        </div>
        <div class="card-body">
            @if (showAddTask)
            {
                <EditForm EditContext="@createTaskEditContext" OnValidSubmit="@CreateTaskAsync">
                    <DataAnnotationsValidator />
                    <div class="row g-2">
                        <div class="col-md-4">
                            <label class="form-label">Title</label>
                            <InputText class="form-control" @bind-Value="newTask.Title" />
                            <ValidationMessage For="@(() => newTask.Title)" />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Description</label>
                            <InputText class="form-control" @bind-Value="newTask.Description" />
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">Due</label>
                            <InputDate class="form-control" @bind-Value="newTask.DueDate" />
                        </div>
                    </div>
                    <div class="mt-2 d-flex gap-2">
                        <button class="btn btn-primary" type="submit" disabled="@busy">Add Task</button>
                        <button class="btn btn-outline-secondary" type="button" @onclick="CancelAddTask" disabled="@busy">Cancel</button>
                    </div>
                </EditForm>
            }
        </div>
    </div>

    @if (tasks.Count == 0)
    {
        <p class="text-muted">No tasks.</p>
    }
    else
    {
        @foreach (var t in tasks.OrderBy(t => t.Order).ThenBy(t => t.DueDate))
        {
            <div class="card mb-2">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-start">
                        <div class="me-3">
                            <h4 class="fw-bold">@t.Title</h4>
                            @if (!string.IsNullOrWhiteSpace(t.Description))
                            {
                                <h5 class="text-muted small">@t.Description</h5>
                            }
                        </div>
                        <div class="d-flex align-items-center gap-2">
                            <span class="badge @(t.Status == PunchList.Models.TaskStatus.Completed ? "status-completed" : t.Status == PunchList.Models.TaskStatus.InProgress ? "status-inprogress" : "status-new")">@t.Status</span>

                            <button class="btn btn-outline-secondary"
                                    @onclick="() => ToggleTask(t.Id)"
                                    aria-expanded="@IsExpanded(t.Id)"
                                    aria-controls="subtasks-@t.Id"
                                    title="Toggle subtasks">
                                @(IsExpanded(t.Id) ? "Hide ▾" : "Show ▸")
                            </button>
                        </div>
                    </div>

                    @if (IsExpanded(t.Id))
                    {
                        <hr class="mt-3" />
                        <div class="d-flex justify-content-between align-items-center">
                            <div class="fw-semibold">Sub tasks:</div>
                            <div class="d-flex gap-2">
                                <input class="form-control form-control-sm" style="width:240px" placeholder="New subtask title"
                                       @bind="newSubTaskTitle[t.Id]" />
                                <button class="btn btn-sm btn-outline-primary" @onclick="@(() => AddSubTask(t.Id))" disabled="@busy">Add</button>
                            </div>
                        </div>

                        @if (t.SubTasks?.Any() == true)
                        {
                            <ul id="subtasks-@t.Id" class="list-group list-group-flush mt-2">
                                @foreach (var st in t.SubTasks.OrderBy(s => s.Order))
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        <div class="d-flex align-items-center gap-2">
                                            <input type="checkbox"
                                                   checked="@st.IsDone"
                                                   @onchange="() => ToggleSubTask(t.Id, st.Id)" />
                                            <span>@st.Title</span>
                                        </div>
                                        <button class="btn btn-sm btn-outline-danger" @onclick="@(() => DeleteSubTask(st.Id))" disabled="@busy">Delete</button>
                                    </li>
                                }
                            </ul>
                        }
                        else
                        {
                            <div class="text-muted small mt-2">No subtasks.</div>
                        }

                        <div class="d-flex gap-2 mt-4">
                            <button class="btn btn-sm btn-outline-danger" @onclick="@(() => DeleteTask(t.Id))" disabled="@busy">Delete Task</button>
                        </div>
                    }
                </div>
            </div>
        }
    }
}

@code {
    [Parameter] public int projectId { get; set; }

    private Project? project;
    private List<TaskItem> tasks = new();

    private bool isLoading = true;
    private bool busy = false;
    private string? message;
    private string? error;

    private NewTaskModel newTask = new();
    private EditContext? createTaskEditContext;
    private bool showAddTask = false;

    private readonly Dictionary<int, string> newSubTaskTitle = new();

    private readonly HashSet<int> expandedTaskIds = new();

    protected override async Task OnInitializedAsync()
    {
        await ReloadAsync();
        isLoading = false;
    }

    private async Task ReloadAsync()
    {
        project = await ProjectService.GetProjectByIdAsync(projectId);
        tasks = project?.Tasks?.ToList() ?? new List<TaskItem>();
        foreach (var t in tasks) newSubTaskTitle.TryAdd(t.Id, string.Empty);
        StateHasChanged();
    }

    private bool IsExpanded(int taskId) => expandedTaskIds.Contains(taskId);

    private void ToggleTask(int taskId)
    {
        if (!expandedTaskIds.Remove(taskId))
            expandedTaskIds.Add(taskId);
    }

    private void ToggleAddTaskBox()
    {
        if (busy) return;

        if (showAddTask)
        {
            CancelAddTaskInternal();
        }
        else
        {
            OpenAddTaskInternal();
        }
    }

    private void CancelAddTask()
    {
        if (busy) return;
        CancelAddTaskInternal();
    }

    private void OpenAddTaskInternal()
    {
        showAddTask = true;
        createTaskEditContext = new EditContext(newTask);
    }

    private void CancelAddTaskInternal()
    {
        newTask = new();
        createTaskEditContext = new EditContext(newTask); // clears validation messages
        showAddTask = false;
    }

    private async Task CreateTaskAsync()
    {
        if (busy) return;
        busy = true; message = error = null;
        try
        {
            var ti = new TaskItem
            {
                ProjectId = projectId,
                Title = newTask.Title!.Trim(),
                Description = string.IsNullOrWhiteSpace(newTask.Description) ? null : newTask.Description!.Trim(),
                Status = PunchList.Models.TaskStatus.New,
                Order = 0,
                DueDate = newTask.DueDate
            };

            var created = await TaskItemService.CreateTask(ti);
            if (created is null)
            {
                error = "Failed to create task.";
                return;
            }

            newTask = new();
            createTaskEditContext = new EditContext(newTask); // reset validation state
            await ReloadAsync();
            message = "Task added.";
        }
        catch (Exception ex)
        {
            error = $"Error adding task: {ex.Message}";
        }
        finally
        {
            busy = false;
        }
    }

    private async Task DeleteProject()
    {
        if (busy) return;
        busy = true; message = error = null;
        try
        {
            if (project is null) return;
            await ProjectService.DeleteProjectAsync(project);
            message = "Project deleted.";
            // navigate away after deletion
            NavigationManager.NavigateTo("/admin/projects");
        }
        catch (Exception ex)
        {
            error = $"Error deleting project: {ex.Message}";
        }
        finally
        {
            busy = false;
        }
    }

    private async Task DeleteTask(int taskId)
    {
        if (busy) return;
        busy = true; message = error = null;
        try
        {
            await TaskItemService.DeleteTask(taskId);
            await ReloadAsync();
            message = "Task deleted.";
        }
        catch (Exception ex)
        {
            error = $"Error deleting task: {ex.Message}";
        }
        finally
        {
            busy = false;
        }
    }

    private async Task AddSubTask(int taskId)
    {
        if (busy) return;
        busy = true; message = error = null;
        try
        {
            if (!newSubTaskTitle.TryGetValue(taskId, out var title) || string.IsNullOrWhiteSpace(title))
            {
                error = "Subtask title is required.";
                return;
            }

            await SubTaskService.CreateAsync(taskId, title.Trim());
            newSubTaskTitle[taskId] = string.Empty;
            await ReloadAsync();
            message = "Subtask added.";
        }
        catch (Exception ex)
        {
            error = $"Error adding subtask: {ex.Message}";
        }
        finally
        {
            busy = false;
        }
    }

    private async Task ToggleSubTask(int taskId, int subTaskId)
    {
        try
        {
            await TaskItemService.ToggleSubTaskAsync(taskId, subTaskId);
            await ReloadAsync();
        }
        catch (Exception ex)
        {
            error = $"Error toggling subtask: {ex.Message}";
        }
    }

    private async Task DeleteSubTask(int subTaskId)
    {
        if (busy) return;
        busy = true; message = error = null;
        try
        {
            await SubTaskService.DeleteAsync(subTaskId);
            await ReloadAsync();
            message = "Subtask deleted.";
        }
        catch (Exception ex)
        {
            error = $"Error deleting subtask: {ex.Message}";
        }
        finally
        {
            busy = false;
        }
    }

    private sealed class NewTaskModel
    {
        [Required, StringLength(200)]
        public string? Title { get; set; }
        [StringLength(2000)]
        public string? Description { get; set; }
        public DateTime? DueDate { get; set; }
    }
}
