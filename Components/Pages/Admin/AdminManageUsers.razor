@page "/admin/users"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Authorization
@using System.ComponentModel.DataAnnotations
@using PunchList.Data
@inject IJSRuntime JS
@inject UserManager<ApplicationUser> UserManager
@inject RoleManager<IdentityRole> RoleManager
@attribute [Authorize(Roles = "Admin")]

<div class="mt-3">
    <button class="btn btn-outline-secondary" @onclick="GoBack">← Back</button>
</div>

<h3 class="mt-3">Manage Users</h3>
<hr class="mb-4" />

@if (isLoading)
{
    <p>Loading...</p>
}
else
{
    <div class="row g-4">
        <div class="col-12">
            @* Create User (collapsible) *@
            <div class="card h-100">
                <div class="card-header d-flex justify-content-between align-items-center" style="cursor:pointer;" @onclick="ToggleCardBox">
                    <span class="fw-semibold">Create User</span>
                    <button class="btn btn-outline-hidden"
                            @onclick:stopPropagation="true"
                            @onclick="ToggleCardBox">
                        @(IsExpanded ? "▾" : "▸")
                    </button>
                </div>

                @if (IsExpanded)
                {
                    <div class="card-body">
                        <EditForm EditContext="@ToggleCard" OnValidSubmit="@CreateUserAsync">
                            <DataAnnotationsValidator />
                            <div class="mb-2">
                                <label class="form-label">User name</label>
                                <InputText class="form-control" @bind-Value="newUser.UserName" />
                                <ValidationMessage For="@(() => newUser.UserName)" />
                            </div>
                            <div class="mb-2">
                                <label class="form-label">Email</label>
                                <InputText class="form-control" type="email" @bind-Value="newUser.Email" />
                                <ValidationMessage For="@(() => newUser.Email)" />
                            </div>
                            <div class="mb-2">
                                <label class="form-label">Password</label>
                                <InputText class="form-control" type="password" @bind-Value="newUser.Password" />
                                <ValidationMessage For="@(() => newUser.Password)" />
                            </div>
                            <div class="form-check mb-3">
                                <InputCheckbox class="form-check-input" @bind-Value="newUser.IsAdmin" />
                                <label class="form-check-label">Admin</label>
                            </div>
                            <div class="d-flex gap-2">
                                <button class="btn btn-primary" type="submit">Create</button>
                                <button class="btn btn-outline-secondary" type="button" @onclick="CancelAddUser">Cancel</button>
                            </div>
                        </EditForm>
                    </div>
                }
            </div>
        </div>

        <div class="col-12">
            @* User table with role and actions *@
            <div class="card h-100">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <span class="fw-semibold">All Users</span>
                </div>
                <div class="card-body">
                    @if (users is null || users.Count == 0)
                    {
                        <p class="text-muted">No users.</p>
                    }
                    else
                    {
                        <div class="table-responsive" style="max-height:520px; overflow:auto;">
                            <table class="table table-sm align-middle">
                                <thead>
                                    <tr>
                                        <th>User</th>
                                        <th>Email</th>
                                        <th>Roles</th>
                                        <th style="width:1%;">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var u in users)
                                    {
                                        var isAdmin = userRoles.TryGetValue(u.Id, out var rs) && rs.Contains(AdminRole);
                                        var isSelf = u.Id == currentUserId;
                                        <tr>
                                            <td>@(string.IsNullOrWhiteSpace(u.DisplayName) ? u.UserName : u.DisplayName)</td>
                                            <td>@u.Email</td>
                                            <td>
                                                @if (userRoles.TryGetValue(u.Id, out var roles) && roles.Any())
                                                {
                                                    <span>@string.Join(", ", roles)</span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">—</span>
                                                }
                                            </td>
                                            <td class="text-nowrap">
                                                @if (!isAdmin)
                                                {
                                                    <button class="btn btn-sm btn-outline-primary me-1" @onclick="() => MakeAdmin(u)">Make Admin</button>
                                                }
                                                else
                                                {
                                                    <button class="btn btn-sm btn-outline-warning me-1" @onclick="() => RemoveAdmin(u)">Remove Admin</button>
                                                }
                                                <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteUser(u)">Delete</button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    // Role names
    private const string AdminRole = "Admin";
    private const string UserRole = "User";

    // Page state
    private bool isLoading = true;
    private string? error;

    // Data and caches
    private List<ApplicationUser>? users;
    private readonly Dictionary<string, List<string>> userRoles = new();

    // Auth context for current user id (for potential self-protection)
    [CascadingParameter] private Task<AuthenticationState> AuthenticationStateTask { get; set; } = default!;
    private string? currentUserId;

    // Create user model
    private NewUserModel newUser = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Ensure required roles exist
            await EnsureRoleAsync(UserRole);
            await EnsureRoleAsync(AdminRole);

            // Capture current user id
            var auth = await AuthenticationStateTask;
            currentUserId = auth.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

            // Load users and role map
            await LoadUsersAsync();
        }
        catch (Exception ex)
        {
            error = $"Failed to load users: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    // Ensures role exists, throws if cannot create
    private async Task EnsureRoleAsync(string roleName)
    {
        if (!await RoleManager.RoleExistsAsync(roleName))
        {
            var res = await RoleManager.CreateAsync(new IdentityRole(roleName));
            if (!res.Succeeded)
            {
                throw new InvalidOperationException($"Unable to ensure '{roleName}' role: {string.Join(", ", res.Errors.Select(e => e.Description))}");
            }
        }
    }

    // Loads users and their roles into cache
    private async Task LoadUsersAsync()
    {
        users = UserManager.Users.OrderBy(u => u.UserName).ToList();
        userRoles.Clear();
        foreach (var u in users)
        {
            userRoles[u.Id] = (await UserManager.GetRolesAsync(u)).ToList();
        }
    }

    // Creates a user, assigns User role and optionally Admin
    private async Task CreateUserAsync()
    {
        try
        {
            var user = new ApplicationUser
            {
                UserName = newUser.UserName!.Trim(),
                Email = string.IsNullOrWhiteSpace(newUser.Email) ? null : newUser.Email!.Trim(),
                EmailConfirmed = false,
            };

            var result = await UserManager.CreateAsync(user, newUser.Password!);
            if (!result.Succeeded)
            {
                error = string.Join("; ", result.Errors.Select(e => e.Description));
                return;
            }

            // Always add default "User" role
            await EnsureRoleAsync(UserRole);
            var userRoleRes = await UserManager.AddToRoleAsync(user, UserRole);
            if (!userRoleRes.Succeeded)
            {
                error = string.Join("; ", userRoleRes.Errors.Select(e => e.Description));
                await UserManager.DeleteAsync(user);
                return;
            }

            // Optionally add Admin role
            var addAdmin = newUser.IsAdmin;
            if (addAdmin)
            {
                await EnsureRoleAsync(AdminRole);
                var adminRes = await UserManager.AddToRoleAsync(user, AdminRole);
                if (!adminRes.Succeeded)
                {
                    error = string.Join("; ", adminRes.Errors.Select(e => e.Description));
                    await UserManager.DeleteAsync(user);
                    return;
                }
            }

            // Reset form and reload list
            newUser = new();
            ToggleCard = new EditContext(newUser); // reset validation state
            await LoadUsersAsync();
        }
        catch (Exception ex)
        {
            error = $"Failed to create user: {ex.Message}";
        }
    }

    // Deletes a user
    private async Task DeleteUser(ApplicationUser user)
    {
        try
        {
            var res = await UserManager.DeleteAsync(user);
            if (!res.Succeeded)
            {
                error = string.Join("; ", res.Errors.Select(e => e.Description));
                return;
            }

            await LoadUsersAsync();
        }
        catch (Exception ex)
        {
            error = $"Failed to delete user: {ex.Message}";
        }
    }

    // Role changes
    private async Task MakeAdmin(ApplicationUser user)
    {
        try
        {
            await EnsureRoleAsync(AdminRole);
            var res = await UserManager.AddToRoleAsync(user, AdminRole);
            if (!res.Succeeded)
            {
                error = string.Join(", ", res.Errors.Select(e => e.Description));
                return;
            }
            await LoadUsersAsync();
        }
        catch (Exception ex)
        {
            error = $"Failed to grant Admin: {ex.Message}";
        }
    }

    private async Task RemoveAdmin(ApplicationUser user)
    {
        try
        {
            var res = await UserManager.RemoveFromRoleAsync(user, AdminRole);
            if (!res.Succeeded)
            {
                error = string.Join(", ", res.Errors.Select(e => e.Description));
                return;
            }
            await LoadUsersAsync();
        }
        catch (Exception ex)
        {
            error = $"Failed to remove Admin: {ex.Message}";
        }
    }

    private sealed class NewUserModel
    {
        [Required, StringLength(64, MinimumLength = 3)]
        public string? UserName { get; set; }
        [EmailAddress]
        public string? Email { get; set; }
        [Required, StringLength(100, MinimumLength = 6)]
        public string? Password { get; set; }
        public bool IsAdmin { get; set; }
    }

    // Collapsible "Create User" form state
    private EditContext? ToggleCard;
    private bool IsExpanded = false;

    private void ToggleCardBox()
    {
        if (IsExpanded)
            CancelAddUser();
        else
            OpenAddUser();
    }

    private void OpenAddUser()
    {
        IsExpanded = true;
        ToggleCard = new EditContext(newUser);
    }

    private void CancelAddUser()
    {
        newUser = new();
        ToggleCard = new EditContext(newUser); // clears validation messages
        IsExpanded = false;
    }

    // Back navigation via JS history
    private async Task GoBack()
    {
        await JS.InvokeVoidAsync("history.back");
    }
}
