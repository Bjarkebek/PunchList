@page "/admin/projects"
@using Microsoft.AspNetCore.Authorization
@using PunchList.Services
@using PunchList.Models
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@inject IProjectService ProjectService
@attribute [Authorize(Roles = "Admin")]

<div class="mt-3">
    <a class="btn btn-outline-secondary" href="/admin">← Back </a>
</div>

<h3 class="mt-3">All Projects</h3>
<hr class="mb-4" />

<div class="card mb-4">
    <div class="card-header d-flex justify-content-between align-items-center" style="cursor:pointer;">
        <span class="fw-semibold">Create Project</span>
        <button class="btn btn-sm btn-outline-secondary" 
        @onclick:stopPropagation="true" 
        @onclick="ToggleCreateBox" 
        >
            @(IsExpanded ? "Close ▾" : "Open ▸")
        </button>
    </div>
    <div class="card-body">
        @if (IsExpanded)
        {
            @if (!string.IsNullOrWhiteSpace(message))
            {
                <div class="alert alert-success py-1">@message</div>
            }
            @if (!string.IsNullOrWhiteSpace(error))
            {
                <div class="alert alert-danger py-1">@error</div>
            }

            <EditForm EditContext="@ToggleCard" OnValidSubmit="@CreateProject">
                <DataAnnotationsValidator />
                <div class="mb-2">
                    <label class="form-label">Project name</label>
                    <InputText class="form-control form-control-sm" @bind-Value="newProject.Name" />
                    <ValidationMessage For="@(() => newProject.Name)" />
                </div>
                <div class="mb-2">
                    <label class="form-label">Project description</label>
                    <InputTextArea class="form-control form-control-sm" rows="2" @bind-Value="newProject.Description" />
                </div>
                <div class="d-flex gap-2 mt-3">
                    <button class="btn btn-sm btn-primary" type="submit" >Create</button>
                    <button class="btn btn-sm btn-outline-secondary" type="button" @onclick="CancelCreate" >Cancel</button>
                </div>
            </EditForm>
        }
    </div>
</div>

@if (Projects is null)
{
    <p>Loading...</p>
}
else if (Projects.Count == 0)
{
    <p class="text-muted">No projects yet.</p>
}
else
{
    <div class="row row-cols-1 row-cols-md-2 g-3">
        @foreach (var p in Projects.OrderBy(p => p.CreatedAt))
        {
            var total = p.Tasks?.Count ?? 0;
            var done = p.Tasks?.Count(t => t.Status == PunchList.Models.TaskStatus.Completed) ?? 0;
            var pct = total == 0 ? 0 : (int)(100.0 * done / total);

            <div class="col">
                <div class="card h-100">
                    <div class="card-body">
                        <h5 class="card-title">@p.Name</h5>
                        @if (!string.IsNullOrWhiteSpace(p.Description))
                        {
                            <p class="text-muted">@p.Description</p>
                        }
                        <div class="progress mb-2" style="height:8px;">
                            <div class="progress-bar" style="width:@pct%"></div>
                        </div>
                        <small class="text-muted">@done/@total completed</small>
                    </div>
                    <div class="card-footer d-flex gap-2">
                        <a class="btn btn-sm btn-primary mt-2 mb-2" href="/admin/projects/@p.Id">Manage</a>
                        <a class="btn btn-sm btn-outline-secondary mt-2 mb-2" href="/project/@p.Id">Open</a>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    public List<Project>? Projects { get; set; }

    private string? message;
    private string? error;

    private NewProjectModel newProject = new();

    private sealed class NewProjectModel
    {
        [Required, StringLength(200)]
        public string? Name { get; set; }
        [StringLength(1000)]
        public string? Description { get; set; }
    }
    

    protected override async Task OnInitializedAsync()
    {
        Projects = await ProjectService.GetProjectsAsync();
        ToggleCard = new EditContext(newProject);
    }

    private async Task ReloadAsync()
    {
        Projects = await ProjectService.GetProjectsAsync();
        StateHasChanged();
    }     

    private async Task CreateProject()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(newProject.Name))
            {
                error = "Project name is required.";
                return;
            }

            var p = new Project
            {
                Name = newProject.Name.Trim(),
                Description = string.IsNullOrWhiteSpace(newProject.Description) ? null : newProject.Description.Trim(),
                CreatedAt = DateTime.UtcNow
            };

            await ProjectService.AddProjectAsync(p);

            

            if (string.IsNullOrEmpty(error))
            {
                newProject = new();
                ToggleCard = new EditContext(newProject); // reset validation state
                message = "Project and tasks created.";
                await ReloadAsync();
            }
        }
        catch (Exception ex)
        {
            error = $"Failed to create project/tasks: {ex.Message}";
        }
    }

    



    // Toggles Card
    private EditContext? ToggleCard;

    private bool IsExpanded = false;

    private void ToggleCreateBox()
    {
        if (IsExpanded)
            CancelCreate();
        else
            OpenCreate();
    }    

    private void OpenCreate()
    {
        IsExpanded = true;
        ToggleCard ??= new EditContext(newProject);
    }

    private void CancelCreate()
    {
        newProject = new();
        ToggleCard = new EditContext(newProject); // clears validation messages
        IsExpanded = false;
    }
}
