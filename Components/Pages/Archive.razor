@page "/projects/archive"
@using Microsoft.AspNetCore.Authorization
@using PunchList.Models
@using PunchList.Services
@inject IJSRuntime JS
@inject IProjectService ProjectService
@inject NavigationManager Nav
@attribute [Authorize]

<div class="mt-3">
    <button class="btn btn-outline-secondary" @onclick="GoBack">← Back</button>
</div>

<h3 class="mt-3">Archive</h3>
<hr class="mb-4" />

@if (Projects is null)
{
    <p>Loading...</p>
}
else if (Projects.Count == 0)
{
    <p class="text-muted">No archived projects.</p>
}
else
{
    <div class="row row-cols-1 row-cols-md-2 g-3">
        @foreach (var p in Projects.OrderBy(p => p.CreatedAt))
        {
            // Calculations to progress bar
            var totalTasks = p.Tasks?.Count ?? 0;
            var completedTasks = p.Tasks?.Count(t => t.Status == PunchList.Models.TaskStatus.Completed) ?? 0;
            var pct = totalTasks == 0 ? 0 : (int)(100.0 * completedTasks / totalTasks);

            @* w-50 = 2 cards per row*@
            @* w-100 = 1 card per row*@
            <div class="w-50 mb-4">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">@p.Name</h5>
                        @if (!string.IsNullOrWhiteSpace(p.Description))
                        {
                            <p class="text-muted">@p.Description</p>
                        }

                        @* progress bar *@
                        <lang class="progress mb-2" style="height:8px;"><lang class="@($"progress-bar {(pct == 100 ? "bg-success" : "progress-bar")}")" style="width:@pct%;"></lang></lang>
                        <small class="text-muted">@completedTasks/@totalTasks completed</small>

                        <small class="text-muted d-block">Completed: @(p.CompletedAt == default ? "-" : p.CompletedAt.ToLocalTime().ToShortDateString())</small>
                    </div>
                    <div class="card-footer">
                        <div class="d-flex justify-content-between align-items-center">
                            <button class="btn btn-sm btn-outline-secondary" @onclick="() => ReopenProject(p.Id)">↺ Reopen</button>
                            <a class="btn btn-sm btn-primary" href="/project/@p.Id">Show Project</a>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    List<Project>? Projects;

    protected override async Task OnInitializedAsync()
    {
        await LoadProjects();
    }

    private async Task LoadProjects()
    {
        Projects = await ProjectService.GetArchivedProjectsAsync();
        StateHasChanged();
    }

    private async Task ReopenProject(int Id)
    {
        await ProjectService.ReopenProjectAsync(Id);
        await LoadProjects();
    }


    // JS method to go back to previous page
    private async Task GoBack()
    {
        await JS.InvokeVoidAsync("history.back");
    }
}