@page "/project/{projectId:int}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using PunchList.Data
@using PunchList.Models
@using PunchList.Services
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using Microsoft.AspNetCore.Identity
@inject IJSRuntime JS
@inject IProjectService ProjectService
@inject ITaskItemService TaskItemService
@inject ISubTaskItemService SubTaskItemService
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager Nav
@attribute [Authorize]

<div class="mt-3">
    <button class="btn btn-outline-secondary" @onclick="GoBack">← Back</button>
</div>

@if (project is null)
{
    <p>Loading...</p>
}
else
{
    <div class="mt-3 mb-5">
        <h4 class="mb-2">@project.Name</h4>
        @if (!string.IsNullOrWhiteSpace(project.Description))
        {
            <div class="text-muted mb-3">@project.Description</div>
        }
        @{
            // Progress bar calculation
            var totalTasks = tasks?.Count ?? 0;
            var completedTasks = tasks?.Count(t => t.Status == PunchList.Models.TaskStatus.Completed) ?? 0;
            var pct = totalTasks == 0 ? 0 : (int)(100.0 * completedTasks / totalTasks);
            var allDone = totalTasks > 0 && completedTasks == totalTasks;
        }
        @* progress bar *@
        <lang class="progress mb-2" style="height:8px;"><lang class="@($"progress-bar {(pct == 100 ? "bg-success" : "progress-bar")}")" style="width:@pct%;"></lang></lang>
        <small class="text-muted">@completedTasks/@totalTasks completed</small>

        @* Allow completing the project when all tasks are done *@
        @if (allDone && project is not null && !project.IsCompleted)
        {
            <div class="mt-3">
                <button class="btn btn-success" @onclick="CompleteProjectAsync">✓ Complete Project</button>
            </div>
        }
        @if (project.IsCompleted && project.CompletedAt != default)
        {
            <div class="mt-2 small text-muted">Completed on @project.CompletedAt.ToLocalTime().ToShortDateString()</div>
        }
    </div>

    @if (tasks is null)
    {
        <p>Loading...</p>
    }
    else if (tasks.Count == 0)
    {
        <p class="text-muted">No tasks.</p>
    }
    else
    {
        <h4 class="mb-3">Tasks: </h4>
        @foreach (var t in tasks.OrderBy(t => t.DueDate))
        {
            <div class="card mb-2">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-start">
                        <div class="me-3">
                            <h4 class="fw-normal">@t.Title</h4>
                            <hr class="mt-1" />
                            @if (!string.IsNullOrWhiteSpace(t.Description))
                            {
                                <h5 class="text small">@t.Description</h5>
                            }
                            @if (!string.IsNullOrWhiteSpace(t.DueDate.ToString()))
                            {
                                <h6 class="text-muted small">Due: @t.DueDate.Value.ToShortDateString()</h6>
                            }
                        </div>
                        <div class="d-flex align-items-center gap-2">
                            @* Toggle details (subtasks) *@
                            <button class="btn btn-outline-secondary"
                                    @onclick="() => ToggleTask(t.Id)">
                                @(IsTaskExpanded(t.Id) ? "Hide ▾" : "Show ▸")
                            </button>

                        </div>
                    </div>

                    @if (IsTaskExpanded(t.Id))
                    {
                        <hr class="mt-3" />
                        <div class="fw-semibold">Sub tasks:</div>
                        <ul id="subtasks-@t.Id" class="list-group list-group-flush mt-2">
                            @if (t.SubTasks?.Any() == true)
                            {
                                @foreach (var st in t.SubTasks.OrderBy(s => s.Order))
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        <span>@st.Title</span>
                                        @* Inline toggle of subtask state *@
                                        <input type="checkbox"
                                               @bind="st.IsDone"
                                               @bind:after="async () => await SubTaskItemService.ToggleSubTaskAsync(t.Id, st.Id)" />
                                    </li>
                                }
                            }
                            else
                            {
                                <span>No Subtasks</span>
                            }
                        </ul>
                        <div class="d-flex gap-2 mt-4">
                            @if (t.Status != PunchList.Models.TaskStatus.Completed)
                            {
                                <button class="btn btn-sm btn-success"
                                        disabled="@(!CanComplete(t))"
                                        @onclick="() => CompleteAsync(t)">
                                    ✓ Complete
                                </button>
                            }
                            else
                            {
                                <button class="btn btn-sm btn-secondary" @onclick="() => ReopenAsync(t)">↺ Reopen</button>
                                <span class="mt-2 small text-muted">completed by @GetCompletedByName(t.CompletedByUserId) on @t.CompletedAt.Value.ToShortDateString()</span>
                            }
                        </div>
                    }
                </div>
            </div>
        }
    }
}

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; } = default!;

    // Route params and project instance
    [Parameter]
    public int projectId { get; set; }

    [Parameter]
    public Project project { get; set; }

    // Loaded tasks for this project
    List<TaskItem>? tasks;

    // Current user id for actions
    string? userId;

    protected override async Task OnInitializedAsync()
    {
        // Resolve user id and load project/tasks
        var authState = await AuthenticationStateTask;
        userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        project = await ProjectService.GetProjectByIdAsync(projectId);
        await ReloadTasksAsync();
    }

    // Loads tasks for the project and prepares CompletedBy name cache.
    private async Task ReloadTasksAsync()
    {
        var all = await TaskItemService.LoadTasks();
        tasks = all.Where(t => t.ProjectId == projectId).ToList();

        // Populate user display names for completed tasks
        completedByNames.Clear();
        var ids = tasks
            .Where(t => !string.IsNullOrEmpty(t.CompletedByUserId))
            .Select(t => t.CompletedByUserId!)
            .Distinct()
            .ToList();

        foreach (var id in ids)
        {
            var user = await UserManager.FindByIdAsync(id);
            var name = user is null
                ? id
                : (string.IsNullOrWhiteSpace(user.DisplayName) ? (user.UserName ?? id) : user.DisplayName);
            completedByNames[id] = name;
        }

        // Auto-reopen if project marked complete but tasks aren't all complete
        if (project is not null && project.IsCompleted)
        {
            var total = tasks.Count;
            var done = tasks.Count(t => t.Status == PunchList.Models.TaskStatus.Completed);
            var allDone = total > 0 && done == total;

            if (!allDone)
            {
                await ProjectService.ReopenProjectAsync(project.Id);
                project = await ProjectService.GetProjectByIdAsync(projectId);
            }
        }

        await InvokeAsync(StateHasChanged);
    }

    // Cache: CompletedByUserId -> display name
    private readonly Dictionary<string, string> completedByNames = new();
    private string GetCompletedByName(string? id)
        => (completedByNames.TryGetValue(id, out var n) ? n : "Unknown");

    // A task can be completed only when it has no subtasks or all subtasks are done.
    bool CanComplete(TaskItem t) => t.SubTasks?.All(st => st.IsDone) ?? true;

    // Completes/Reopens task, then refreshes
    private async Task CompleteAsync(TaskItem t)
    {
        if (string.IsNullOrEmpty(userId)) return;
        await TaskItemService.CompleteTask(t.Id, userId);
        await ReloadTasksAsync();
    }

    private async Task ReopenAsync(TaskItem t)
    {
        await TaskItemService.ReopenTask(t.Id);
        await ReloadTasksAsync();
    }

    // Completes the project and navigates away
    private async Task CompleteProjectAsync()
    {
        if (project is null) return;
        await ProjectService.CompleteProjectAsync(project.Id);
        Nav.NavigateTo("/dashboard");
    }

    // Expanded state per task card
    private readonly HashSet<int> expandedTaskIds = new();
    private bool IsTaskExpanded(int taskId) => expandedTaskIds.Contains(taskId);
    private void ToggleTask(int taskId)
    {
        if (!expandedTaskIds.Remove(taskId))
            expandedTaskIds.Add(taskId);
    }

    // Back navigation via JS history
    private async Task GoBack()
    {
        await JS.InvokeVoidAsync("history.back");
    }
}
