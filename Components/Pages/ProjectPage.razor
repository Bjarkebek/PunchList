@page "/project/{projectId:int}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using PunchList.Data
@using PunchList.Models
@using PunchList.Services
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@attribute [Authorize]

@if (project is null)
{
    <p>Loading...</p>
}
else
{
    <div class="mt-5 mb-5">
        <h4 class="mb-2">@project.Name</h4>
        @if (!string.IsNullOrWhiteSpace(project.Description))
        {
            <div class="text-muted mb-3">@project.Description</div>
        }

        @{
            var total = tasks?.Count ?? 0;
            var done = tasks?.Count(t => t.Status == PunchList.Models.TaskStatus.Completed) ?? 0;
            var pct = total == 0 ? 0 : (int)(100.0 * done / total);
        }
        @if (tasks is not null)
        {
            <div class="progress mb-2" style="height:8px;">
                <div class="progress-bar" style="width:@pct%"></div>
            </div>
            <small class="text-muted">@done/@total completed</small>
        }
    </div>

    @if (tasks is null)
    {
        <p>Loading...</p>
    }
    else if (tasks.Count == 0)
    {
        <p class="text-muted">No tasks.</p>
    }
    else
    {
        <h4 class="mb-3">Tasks: </h4>
        @foreach (var t in tasks.OrderBy(t => t.Order).ThenBy(t => t.DueDate))
        {
            <div class="card mb-2">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-start">
                        <div class="me-3">
                            <h4 class="fw-normal">@t.Title</h4>
                            @if (!string.IsNullOrWhiteSpace(t.Description))
                            {
                                <h5 class="text-muted small">@t.Description</h5>
                            }
                            
                        </div>
                        <div class="d-flex align-items-center gap-2">
                            <span class="badge @(t.Status == PunchList.Models.TaskStatus.Completed ? "status-completed" : t.Status == PunchList.Models.TaskStatus.InProgress ? "status-inprogress" : "status-new")">@t.Status</span>

                            @if (t.SubTasks?.Any() == true)
                            {
                                <button class="btn btn-outline-secondary"
                                        @onclick="() => ToggleTask(t.Id)"
                                        aria-expanded="@IsExpanded(t.Id)"
                                        aria-controls="subtasks-@t.Id"
                                        title="Toggle subtasks">
                                    @(IsExpanded(t.Id) ? "Hide ▾" : "Show ▸")
                                </button>
                            }
                        </div>
                    </div>

                    @if (t.SubTasks?.Any() == true)
                    {
                        @if (IsExpanded(t.Id))
                        {
                            <hr class="mt-3"/>
                            <div class="fw-semibold">Sub tasks:</div>
                            <ul id="subtasks-@t.Id" class="list-group list-group-flush mt-2">
                                @foreach (var st in t.SubTasks.OrderBy(s => s.Order))
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        <span>@st.Title</span>
                                        <input type="checkbox"
                                               @bind="st.IsDone"
                                               @bind:after="async () => await subTaskItemService.UpdateAsync(st.Id, isDone: st.IsDone)" />
                                    </li>
                                }
                            </ul>
                            <div class="d-flex gap-2 mt-4">
                                @if (t.Status != PunchList.Models.TaskStatus.Completed)
                                {
                                    <button class="btn btn-sm btn-success"
                                            disabled="@(!CanComplete(t) || string.IsNullOrEmpty(userId))"
                                            @onclick="() => CompleteAsync(t)">
                                        ✓ Complete
                                    </button>
                                }
                                else
                                {
                                    <button class="btn btn-sm btn-secondary" @onclick="() => ReopenAsync(t)">↺ Reopen</button>
                                }
                                <AuthorizeView Roles="Admin">
                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteAsync(t.Id)">Delete</button>
                                </AuthorizeView>
                            </div>
                        }
                    }

                    
                </div>
            </div>
        }
    }
}

@code {
    [Inject]
    public IProjectService projectService { get; set; }
    [Inject]
    public ITaskItemService taskItemService { get; set; }
    [Inject]
    public ISubTaskItemService subTaskItemService { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; } = default!;

    [Parameter]
    public int projectId { get; set; }

    [Parameter]
    public Project project { get; set; }

    List<TaskItem>? tasks;
    string? userId;

    // Track expanded/collapsed state per task
    private readonly HashSet<int> expandedTaskIds = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateTask;
        userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        project = await projectService.GetProjectByIdAsync(projectId);
        await ReloadTasksAsync();
    }

    private async Task ReloadTasksAsync()
    {
        var all = await taskItemService.LoadTasks();
        tasks = all.Where(t => t.ProjectId == projectId).ToList();
        await InvokeAsync(StateHasChanged);
    }

    private bool IsExpanded(int taskId) => expandedTaskIds.Contains(taskId);

    private void ToggleTask(int taskId)
    {
        if (!expandedTaskIds.Remove(taskId))
            expandedTaskIds.Add(taskId);
    }

    // A task can be completed only when it has no subtasks or all subtasks are done.
    bool CanComplete(TaskItem t) => t.SubTasks?.All(s => s.IsDone) ?? true;

    private async Task CompleteAsync(TaskItem t)
    {
        if (string.IsNullOrEmpty(userId)) return;
        await taskItemService.CompleteTask(t.Id, userId);
        await ReloadTasksAsync();
    }

    private async Task ReopenAsync(TaskItem t)
    {
        await taskItemService.ReopenTask(t.Id);
        await ReloadTasksAsync();
    }

    private async Task DeleteAsync(int taskId)
    {
        await taskItemService.DeleteTask(taskId);
        await ReloadTasksAsync();
    }
}
